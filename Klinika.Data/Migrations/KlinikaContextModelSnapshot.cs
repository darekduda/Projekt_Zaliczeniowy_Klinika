// <auto-generated />
using System;
using Klinika.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Klinika.Data.Migrations
{
    [DbContext(typeof(KlinikaContext))]
    partial class KlinikaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Klinika.Data.Data.CMS.GeneralAdress", b =>
                {
                    b.Property<int>("IdAdresu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAdresu"));

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PozycjaWyswietlania")
                        .HasColumnType("int");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAdresu");

                    b.ToTable("GeneralAdress");
                });

            modelBuilder.Entity("Klinika.Data.Data.CMS.GeneralContact", b =>
                {
                    b.Property<int>("IdKontaktu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKontaktu"));

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaKontaktu")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NumerTelefonu")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("PozycjaWyswietlania")
                        .HasColumnType("int");

                    b.Property<string>("TytułKontakt")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdKontaktu");

                    b.ToTable("GeneralContact");
                });

            modelBuilder.Entity("Klinika.Data.Data.CMS.GeneralGallery", b =>
                {
                    b.Property<int>("IdGeneralGallery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGeneralGallery"));

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("imgPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGeneralGallery");

                    b.ToTable("GeneralGallery");
                });

            modelBuilder.Entity("Klinika.Data.Data.CMS.GeneralParameter", b =>
                {
                    b.Property<int>("IdGeneralParametr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGeneralParametr"));

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGeneralParametr");

                    b.ToTable("GeneralParameter");
                });

            modelBuilder.Entity("Klinika.Data.Data.CMS.OpeningHours", b =>
                {
                    b.Property<int>("IdGodzinyOtwarcia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGodzinyOtwarcia"));

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Dzien")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GodzinaOtwarciaDo")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("GodzinaOtwarciaOd")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("PozycjaWyswietlania")
                        .HasColumnType("int");

                    b.HasKey("IdGodzinyOtwarcia");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Adres", b =>
                {
                    b.Property<int>("IdAdresu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAdresu"));

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumerDomu")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("NumerMieszkania")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAdresu");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Lekarz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresId")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("PlecId")
                        .HasColumnType("int");

                    b.Property<int?>("PoradniaId")
                        .HasColumnType("int");

                    b.Property<int>("SpecjalizacjaId")
                        .HasColumnType("int");

                    b.Property<int>("TytulNaukowyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresId");

                    b.HasIndex("PlecId");

                    b.HasIndex("PoradniaId");

                    b.HasIndex("SpecjalizacjaId");

                    b.HasIndex("TytulNaukowyId");

                    b.ToTable("Lekarz");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Plec", b =>
                {
                    b.Property<int>("IdPlec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlec"));

                    b.Property<bool>("CzyAktywna")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPlec");

                    b.ToTable("Plec");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Poradnia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CzyAktywna")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoradniaTypId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PoradniaTypId");

                    b.ToTable("Poradnia");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.PoradniaTyp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PoradniaTyp");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.PoradniaZabieg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IdPoradnia")
                        .HasColumnType("int");

                    b.Property<int>("IdZabieg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PoradniaZabieg");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Specjalizacja", b =>
                {
                    b.Property<int>("IdSpecjalizacja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSpecjalizacja"));

                    b.Property<bool>("CzyAktywna")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IdSpecjalizacja");

                    b.ToTable("Specjalizacja");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.TytulNaukowy", b =>
                {
                    b.Property<int>("IdTytułNaukowy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTytułNaukowy"));

                    b.Property<bool>("CzyAktywna")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTytułNaukowy");

                    b.ToTable("TytulNaukowy");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Uzytkownik", b =>
                {
                    b.Property<int>("IdUzytkownika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUzytkownika"));

                    b.Property<int>("AdresId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("NumerPESEL")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("PlecId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUzytkownika");

                    b.HasIndex("AdresId");

                    b.HasIndex("PlecId");

                    b.ToTable("Uzytkownik");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Wizyty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataWizyty")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LekarzId")
                        .HasColumnType("int");

                    b.Property<int?>("PacjentId")
                        .HasColumnType("int");

                    b.Property<int?>("PoradniaId")
                        .HasColumnType("int");

                    b.Property<int?>("UzytkownikIdUzytkownika")
                        .HasColumnType("int");

                    b.Property<int?>("ZabiegId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.HasIndex("PoradniaId");

                    b.HasIndex("UzytkownikIdUzytkownika");

                    b.HasIndex("ZabiegId");

                    b.ToTable("Wizyty");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Zabieg", b =>
                {
                    b.Property<int>("IdZabiegu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZabiegu"));

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("CzasTrwania")
                        .HasColumnType("time");

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Przeciwwskazania")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Przygotowania")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdZabiegu");

                    b.ToTable("Zabieg");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Lekarz", b =>
                {
                    b.HasOne("Klinika.Data.Data.Entities.Adres", "Adres")
                        .WithMany("Lekarz")
                        .HasForeignKey("AdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Klinika.Data.Data.Entities.Plec", "Plec")
                        .WithMany("Lekarz")
                        .HasForeignKey("PlecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Klinika.Data.Data.Entities.Poradnia", "Poradnia")
                        .WithMany("Lekarz")
                        .HasForeignKey("PoradniaId");

                    b.HasOne("Klinika.Data.Data.Entities.Specjalizacja", "Specjalizacja")
                        .WithMany("Lekarz")
                        .HasForeignKey("SpecjalizacjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Klinika.Data.Data.Entities.TytulNaukowy", "TytulNaukowy")
                        .WithMany("Lekarz")
                        .HasForeignKey("TytulNaukowyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adres");

                    b.Navigation("Plec");

                    b.Navigation("Poradnia");

                    b.Navigation("Specjalizacja");

                    b.Navigation("TytulNaukowy");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Poradnia", b =>
                {
                    b.HasOne("Klinika.Data.Data.Entities.PoradniaTyp", "PoradniaTyp")
                        .WithMany("Poradnia")
                        .HasForeignKey("PoradniaTypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoradniaTyp");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Uzytkownik", b =>
                {
                    b.HasOne("Klinika.Data.Data.Entities.Adres", "Adres")
                        .WithMany("Uzytkownik")
                        .HasForeignKey("AdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Klinika.Data.Data.Entities.Plec", "Plec")
                        .WithMany("Uzytkownik")
                        .HasForeignKey("PlecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adres");

                    b.Navigation("Plec");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Wizyty", b =>
                {
                    b.HasOne("Klinika.Data.Data.Entities.Lekarz", "Lekarz")
                        .WithMany("Wizyty")
                        .HasForeignKey("LekarzId");

                    b.HasOne("Klinika.Data.Data.Entities.Poradnia", "Poradnia")
                        .WithMany("Wizyty")
                        .HasForeignKey("PoradniaId");

                    b.HasOne("Klinika.Data.Data.Entities.Uzytkownik", "Uzytkownik")
                        .WithMany("Wizyty")
                        .HasForeignKey("UzytkownikIdUzytkownika");

                    b.HasOne("Klinika.Data.Data.Entities.Zabieg", "Zabieg")
                        .WithMany("Wizyty")
                        .HasForeignKey("ZabiegId");

                    b.Navigation("Lekarz");

                    b.Navigation("Poradnia");

                    b.Navigation("Uzytkownik");

                    b.Navigation("Zabieg");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Adres", b =>
                {
                    b.Navigation("Lekarz");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Lekarz", b =>
                {
                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Plec", b =>
                {
                    b.Navigation("Lekarz");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Poradnia", b =>
                {
                    b.Navigation("Lekarz");

                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.PoradniaTyp", b =>
                {
                    b.Navigation("Poradnia");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Specjalizacja", b =>
                {
                    b.Navigation("Lekarz");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.TytulNaukowy", b =>
                {
                    b.Navigation("Lekarz");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Uzytkownik", b =>
                {
                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("Klinika.Data.Data.Entities.Zabieg", b =>
                {
                    b.Navigation("Wizyty");
                });
#pragma warning restore 612, 618
        }
    }
}
